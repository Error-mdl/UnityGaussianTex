// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CreateInvCDFTexture
#pragma kernel CreateLookupTable
#pragma kernel PopulateLUTMipFilter
#pragma kernel AverageLUTMipFilter
#pragma kernel CompressionCorrection
#pragma kernel WriteBlackToLUT
#pragma kernel CopyLUTSliceTo2D


#define NUM_THREADS 1024
#define NUM_THREADS_2D 32
#define MAX_DIM_LUT 32

#define alpha   1.128379167095512573896 // 2 / sqrt(pi)
#define beta    0.102772603301939973205 // (8 - 2 * pi)/(3 * pi^1.5)
#define gamma   3.826116760542201589481 // 2*sqrt(alpha/3*beta)
#define epsilon 0.694877062764156364381 // 1 / ( (alpha/3*beta)^1.5 * 2*beta)
#define sqrt2   1.414213562373095048802

#define gaussian_mu 0.5
#define gaussian_sigma 0.1666666667
#define gaussian_correction 1.0026
#define gaussian_inv_correction 0.997665462817

Texture2D<float4> _TexIn;
RWTexture2D<float4> _TexOut;
RWTexture2DArray<float4> _LUT;
RWStructuredBuffer<uint> _Index;


RWStructuredBuffer<float> _Red;
RWStructuredBuffer<float> _Green;
RWStructuredBuffer<float> _Blue;
RWStructuredBuffer<float> _Alpha;

uniform uint _TexWidth;
uniform uint _TexHeight;
uniform float4 _ColorMask;
uniform float4 _InvAxisLengths;

uniform uint _LUTWidth;
uniform uint _LUTHeight;
uniform uint _MipLevel;
uniform float4 _MipStd;
uniform uint _KernelWidth;

// hlsl doesn't have asinh despite having sinh, so we need to make our own
float arcsinh(const float x)
{
    return log(x + sqrt(x * x + 1));
}

// hlsl doesn't have atanh despite having tanh, so we need to make our own
float arctanh(const float x)
{
    return 0.5 * log((1.0 + x) / (1.0 - x));
}


/* The inverse error function is properly calculated by an infinite talyor series that converges EXTREMELY slowly
 * for inputs close to 1, so instead we're going to use an approximation based on hyperbolic functions that is close
 * enough for the level of precision we require.
 * See  John D. Vedder, "Simple approximations for the error function and its inverse", American Journal of Physics 55, 762 - 763 (1987)
 */
float InvErf(const float x)
{
    float part1 = epsilon * arctanh(x);
    float part2 = 0.333333333333333 * arcsinh(part1);
    return gamma * sinh(part2);
}

float Quantile(const float index, const float numElements)
{
    return (index + 0.5) / numElements;
}

float InvCDF(const float U, const float mu, const float sigma)
{
    float x = 2.0 * U - 1.0;
    float invErfx = InvErf(gaussian_inv_correction * x);
    return mu + sigma * sqrt2 * invErfx;
}

float Erf(const float x)
{
    float e = exp(-x * x);
    return alpha * sign(x) * sqrt(1.0 - e) * ((1.0/alpha) + 0.155 * e - 0.042625 * e * e);
}

float CDF(const float x, const float mu, const float sigma)
{
    float erf = Erf((x-mu)/(sigma*sqrt2));
    return 0.5 * (1 + gaussian_correction * erf);
}

[numthreads(NUM_THREADS,1,1)]
void CreateInvCDFTexture (uint3 id : SV_DispatchThreadID)
{
    int index = _Index[id.x];
    float U = Quantile((float)id.x, (float)(_TexWidth * _TexHeight));
    float invCDF = InvCDF(U, gaussian_mu, gaussian_sigma);
    int2 uv = int2(index % _TexWidth, index / _TexWidth);
    float4 color = _TexOut[uv] * (1.0 - _ColorMask) + invCDF * _ColorMask;
    _TexOut[uv] = color;
}

[numthreads(NUM_THREADS_2D, NUM_THREADS_2D, 1)]
void CreateLookupTable(uint3 id : SV_DispatchThreadID)
{
    if (id.x < _LUTWidth && id.y < _LUTHeight)
    {
        float x = Quantile(id.x + _LUTWidth * id.y, _LUTWidth * _LUTHeight);
        float U = CDF(x, gaussian_mu, gaussian_sigma);
        int index = (int)floor((double)U * (double)(_TexWidth * _TexHeight));
        float R = _Red[index];
        float G = _Green[index];
        float B = _Blue[index];
        float A = _Alpha[index];
        float4 color = float4(R, G, B, A);
        _LUT[int3(id.xy, 0)] = color;
    }
}


[numthreads(NUM_THREADS_2D, NUM_THREADS_2D, 1)]
void PopulateLUTMipFilter(uint3 id : SV_DispatchThreadID)
{
    uint lutDim = _LUTWidth * _LUTHeight;
    if (id.x < lutDim * 2 && id.y < lutDim)
    {
        float U = Quantile(id.x, lutDim * 2);
        float yQ = Quantile(id.y, lutDim);
        float4 LUTx = float4(InvCDF(U, yQ, _MipStd.x), InvCDF(U, yQ, _MipStd.y), InvCDF(U, yQ, _MipStd.z), InvCDF(U, yQ, _MipStd.w));
        LUTx *= lutDim;
        int4 LUTdim = clamp(LUTx, 0, lutDim - 1);
        int3 LUTuv0 = int3(LUTdim.x % _LUTWidth, LUTdim.x / _LUTWidth, 0);
        int3 LUTuv1 = int3(LUTdim.y % _LUTWidth, LUTdim.y / _LUTWidth, 0);
        int3 LUTuv2 = int3(LUTdim.z % _LUTWidth, LUTdim.z / _LUTWidth, 0);
        int3 LUTuv3 = int3(LUTdim.w % _LUTWidth, LUTdim.w / _LUTWidth, 0);
        _TexOut[id.xy] = float4(_LUT[LUTuv0].r, _LUT[LUTuv1].g, _LUT[LUTuv2].b, _LUT[LUTuv3].a);
    }
}


[numthreads(NUM_THREADS_2D, NUM_THREADS_2D, 1)]
void AverageLUTMipFilter(uint3 id : SV_DispatchThreadID)
{
    uint KernelCoords = _KernelWidth * id.x;
    if (KernelCoords < _TexWidth && id.y < _TexHeight)
    {
        float4 result = 0.0f;
        for (uint i = KernelCoords; i < KernelCoords + _KernelWidth; i++)
        {
            result += _TexIn.Load(int3(i, id.y, 0));
        }
        result /= _KernelWidth;
        if (_KernelWidth == _TexWidth)
        {
            int3 uv = int3(id.y % _LUTWidth, id.y / _LUTWidth, _MipLevel);
            _LUT[uv] = result;
        }
        else
        {
            _TexOut[id.xy] = result;
        }
    }
}

[numthreads(NUM_THREADS_2D, NUM_THREADS_2D, 1)]
void CompressionCorrection(uint3 id : SV_DispatchThreadID)
{
    if (id.x < _TexWidth && id.y < _TexHeight)
    {
        float4 inColor = _TexOut.Load(id.xy);
        float4 outColor = (inColor - 0.5) * _InvAxisLengths + 0.5;
        _TexOut[id.xy] = outColor;
    }
}

[numthreads(NUM_THREADS_2D, NUM_THREADS_2D, 1)]
void WriteBlackToLUT(uint3 id : SV_DispatchThreadID)
{
    if (id.x < _LUTWidth && id.y < _LUTHeight)
    {
        _LUT[uint3(id.xy, 1)] = float4(0,1,0,0);
    }
}

[numthreads(NUM_THREADS_2D, NUM_THREADS_2D, 1)]
void CopyLUTSliceTo2D(uint3 id : SV_DispatchThreadID)
{
    if (id.x < _LUTWidth && id.y < _LUTHeight)
    {
        _TexOut[id.xy] = _LUT[uint3(id.xy, _MipLevel)];
    }
}
